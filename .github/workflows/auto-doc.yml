name: Generate Documentation on PR Merge to Develop

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  find-workflows:
    if: github.event.pull_request.merged == true
    runs-on: self-hosted
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout PR contents
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Find all workflow XMLs with IDs
        id: set-matrix
        run: |
          echo "Finding workflow.id in XML..."
          python3 <<EOF
          import os
          import xml.etree.ElementTree as ET
          import json

          found = []
          for root, dirs, files in os.walk("."):
              for file in files:
                  if file.endswith(".xml"):
                      path = os.path.join(root, file)
                      try:
                          tree = ET.parse(path)
                          root_el = tree.getroot()
                          workflow_id = root_el.attrib.get("id")
                          if workflow_id:
                              found.append({
                                  "id": workflow_id,
                                  "path": path
                              })
                      except Exception:
                          continue

          print(f"Found workflow ID: {[x['id'] for x in found]}")
          matrix = {"include": found}
          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              fh.write(f"matrix={json.dumps(matrix)}\n")
          EOF

  trigger-vro:
    needs: find-workflows
    runs-on: self-hosted
    strategy:
      matrix: ${{ fromJson(needs.find-workflows.outputs.matrix) }}
    steps:
      - name: Checkout PR contents
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Request Refresh Token (with curl --insecure)
        id: refresh-token
        run: |
          RESPONSE=$(curl --insecure -s -X POST "${{ secrets.VRA_URL }}/csp/gateway/am/api/login?access_token" \
            -H "Content-Type: application/json" \
            -d "{\"username\": \"${{ secrets.VRA_USER }}\", \"password\": \"${{ secrets.VRA_PASSWORD }}\"}")
          echo "$RESPONSE" > refresh.json
          REFRESH_TOKEN=$(jq -r '.refresh_token' refresh.json)
          echo "refresh_token=$REFRESH_TOKEN" >> $GITHUB_OUTPUT

      - name: Request Bearer Token (with curl --insecure)
        id: bearer-token
        run: |
          RESPONSE=$(curl --insecure -s -X POST "${{ secrets.VRA_URL }}/iaas/api/login" \
            -H "Content-Type: application/json" \
            -d "{\"refreshToken\": \"${{ steps.refresh-token.outputs.refresh_token }}\"}")
          echo "$RESPONSE" > bearer.json
          TOKEN=$(jq -r '.token' bearer.json)
          echo "bearer_token=$TOKEN" >> $GITHUB_OUTPUT
