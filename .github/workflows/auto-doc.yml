name: Generate Documentation on PR Merge to Develop

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  find-workflows:
    if: github.event.pull_request.merged == true
    runs-on: self-hosted
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout PR contents
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Find all workflow XMLs with IDs
        id: set-matrix
        run: |
          echo "Finding workflow.id in XML..."
          python3 <<EOF
          import os
          import xml.etree.ElementTree as ET
          import json

          found = []
          for root, dirs, files in os.walk("."):
              for file in files:
                  if file.endswith(".xml"):
                      path = os.path.join(root, file)
                      try:
                          tree = ET.parse(path)
                          root_el = tree.getroot()
                          workflow_id = root_el.attrib.get("id")
                          if workflow_id:
                              found.append({
                                  "id": workflow_id,
                                  "path": path
                              })
                      except Exception:
                          continue

          print(f"Found workflow ID: {[x['id'] for x in found]}")
          matrix = {"include": found}
          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              fh.write(f"matrix={json.dumps(matrix)}\n")
          EOF

  trigger-vro:
    needs: find-workflows
    runs-on: self-hosted
    strategy:
      matrix: ${{ fromJson(needs.find-workflows.outputs.matrix) }}
    steps:
      - name: Checkout PR contents
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Request Refresh Token
        id: refresh-token
        uses: octokit/request-action@v2.x
        with:
          route: POST ${{ secrets.VRA_URL }}/csp/gateway/am/api/login?access_token
          mediaType: application/json
          data: |
            {
              "username": "${{ secrets.VRA_USER }}",
              "password": "${{ secrets.VRA_PASSWORD }}"
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse Refresh Token
        id: parse-refresh
        run: |
          echo '${{ steps.refresh-token.outputs.data }}' > response.json
          REFRESH=$(jq -r '.refresh_token' response.json)
          echo "refresh_token=$REFRESH" >> $GITHUB_OUTPUT

      - name: Request Bearer Token
        id: bearer-token
        uses: octokit/request-action@v2.x
        with:
          route: POST ${{ secrets.VRA_URL }}/iaas/api/login
          mediaType: application/json
          data: |
            {
              "refreshToken": "${{ steps.parse-refresh.outputs.refresh_token }}"
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse Bearer Token
        id: parse-bearer
        run: |
          echo '${{ steps.bearer-token.outputs.data }}' > token.json
          TOKEN=$(jq -r '.token' token.json)
          echo "bearer_token=$TOKEN" >> $GITHUB_OUTPUT

